#!/bin/bash

########################################
# Tested with the principals file generated from Ambari 1.4.4.
#
# This script is designed to work with the csv principals list generated by Ambari
#    during step #3 of "Enable Security Wizard".  The script will use the list to
#    create and distribute the keytab files for the cluster.
# It is assumed that this script is run as 'root' or via 'sudo' and that the user
#    has ssh key pairs distributed across the cluster to ensure the keytab files
#    can be distributed.
#
# Parameters:
#   $1 - name of the ambari generated csv file with principal information
#   $2 - pdsh group name that includes ALL hosts in the cluster
#
# JDK Pre-requisite
#    - Depending on the JDK version you are using, you will need to install the jce policy
#        files for the jdk version, that allow for "unlimited strength" encryption.
########################################

# Ensure the security keytab directory exist on all servers
pdsh -g $2 'if [ ! -d "/etc/security/keytabs" ]; then mkdir -p /etc/security/keytabs/; chown root:hadoop /etc/security/keytabs; chmod 750 /etc/security/keytabs; fi'

# Clean up.
if [ -d /tmp/keytabs ]; then
	rm -rf /tmp/keytabs
fi

# Iterate through the list of principals, create and deploy them to the appropriate servers.
cat $1 | while read next; do
	KEYTAB=`echo $next | awk -F',' '{print $1}'`
	USER=`echo $next | awk -F',' '{print $2}'`
	GRP=`echo $next | awk -F',' '{print $3}'`
	OWN=`echo $next | awk -F',' '{print $4}'`
	HOST=`echo $next | awk -F',' '{print $5}'`
	DESC=`echo $next | awk -F',' '{print $6}'`
	PRIN=`echo $next | awk -F',' '{print $7}'`
	DIR=`echo $next | awk -F',' '{print $8}'`
	
	if [ ! -d "/tmp/keytabs/$HOST" ]; then
		mkdir -p /tmp/keytabs/$HOST
	fi
	
	kadmin.local -q "addprinc -randkey $PRIN"
	kadmin.local -q "xst -norandkey -k /tmp/keytabs/$HOST/$KEYTAB $PRIN"
	
	echo "Moving keytab: /tmp/keytabs/$HOST/$KEYTAB to host: $HOST:/etc/security/keytabs"
	scp /tmp/keytabs/$HOST/$KEYTAB $HOST:/etc/security/keytabs
	
	echo "Set permissions for $HOST:/etc/security/keytabs/$KEYTAB to $USER:$GRP $OWN"
	# Note: The -n keeps ssh from breaking out of our loop too early.
	ssh -n $HOST "chown $USER:$GRP /etc/security/keytabs/$KEYTAB;chmod $OWN /etc/security/keytabs/$KEYTAB"
		
done

